<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">
<!-- 该配置文件说明插件需要如何生成，以及生成对应的包名，路径等信息。
      还有重要的就是我们要生成的实体类所对应的的表或者试图
      参照讲解：https://www.jianshu.com/p/e09d2370b796
       -->
<generatorConfiguration>
    <properties resource="mybatis_generator.properties" />
    <context id="MBG" targetRuntime="MyBatis3" defaultModelType="conditional">
        <!-- 注意以下标签的顺序:property*,plugin*,commentGenerator?,jdbcConnection,
                javaTypeResolver?,javaModelGenerator,sqlMapGenerator?,
                javaClientGenerator?,table+ -->

        <commentGenerator>
            <!-- 是否去除自动生成的注释 true：是 ： false:否 -->
            <property name="suppressAllComments" value="false"/>
            <!-- 不希望生成的注释中包含时间戳 -->
            <property name="suppressDate" value="true" />

            <!-- 是否  自动为每一个生成的类创建一个构造方法-->
            <property name="constructorBased" value="false"/>
        </commentGenerator>
        <!-- 数据库连接 -->
        <jdbcConnection
                driverClass="${jdbc_driver}"
                connectionURL="${jdbc_url}"
                userId="${jdbc_username}"
                password="${jdbc_password}">
            <!-- 针对oracle数据库 -->
            <!-- <property name="remarksReporting" value="true"></property> -->
            <!-- 针对mysql数据库 -->
            <property name="useInformationSchema" value="true"></property>
    </jdbcConnection>
    <!-- 指定生成的类型为java类型，避免数据库中number等类型字段 -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>
        <!-- 生成model模型，对应的包，存放位置可以指定具体的路径,如/ProjectName/src，也可以使用MAVEN来自动生成 -->
        <javaModelGenerator targetPackage="${modelPackage}" targetProject="${targetProject}">
            <!-- 在targetPackage的基础上，根据数据库的schema再生成一层package，最终生成的类放在这个package下，默认为false -->
            <property name="enableSubPackages" value="true"/>

            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="false"/>
            <!-- 设置一个根对象，
            如果设置了这个根对象，那么生成的keyClass或者recordClass会继承这个类；在Table的rootClass属性中可以覆盖该选项
            注意：如果在key class或者record class中有root class相同的属性，MBG就不会重新生成这些属性了，包括：
                1，属性名相同，类型相同，有相同的getter/setter方法；-->
            <!--
            <property name="rootClass" value="com.bestpay.wx.electronic.dao.model.base.BaseModel"/>
            -->
        </javaModelGenerator>
        <!--对应的xml mapper文件  -->
        <sqlMapGenerator targetPackage="${sqlMapperPackage}" targetProject="${targetProject}" >
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>
        <!-- 对应的dao接口 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${daoMapperPackage}" targetProject="${targetProject}" >
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>


        <!-- 表名对应生成的实体  在这里进行更改表名  -->
        <table tableName="t_duiba_prize_record" domainObjectName="PrizeRecord" enableCountByExample="false" enableSelectByExample="false"
        	enableDeleteByExample="false" enableUpdateByExample="false">
        </table>
        <!--
           enableCountByExample="false" enableUpdateByExample="false"
           enableDeleteByExample="false" enableSelectByExample="false"
            selectByExampleQueryId="false">
            schema即为数据库名, tableName为对应的数据库表, domainObjectName是要生成的实体类,
            如果想要mapper配置文件加入sql的where条件查询, 可以将enableCountByExample等设为true,
            这样就会生成一个对应domainObjectName的Example类, enableCountByExample等设为false时,
            就不会生成对应的Example类了.
            如果table里边不配置property，默认字段都生成为类属性。
          指定是否生成操作数据库对应的方法 -->
    </context>
</generatorConfiguration>